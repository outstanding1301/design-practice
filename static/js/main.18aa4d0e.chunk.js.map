{"version":3,"sources":["css/App/components/Menu/index.js","css/App/components/Todolist/index.js","css/App/components/Training/index.js","css/App/index.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","className","TodolistItem","done","time","plan","onClick","toggleDone","Todolist","element","React","useRef","useState","items","setItems","parentNoDrag","e","stopPropagation","parentCanDrag","ref","onWheel","onTouchStart","onTouchEnd","onMouseEnter","onMouseLeave","map","item","idx","slice","Object","assign","Training","App","touchY","main","page","setPage","pages","document","getElementsByClassName","noDrag","current","classList","add","moveToPage","from","to","speed","toY","getBoundingClientRect","top","scrollTo","left","behavior","deltaY","length","remove","changedTouches","screenY","onTouchMove","dy","height","window","innerHeight","Math","abs","undefined","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18aa4d0e.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nexport default function Menu(props) {\n    return (\n        <div className='menu'>\n            <icon className='material-icons'>menu</icon>\n            <p>메 뉴</p>\n        </div>\n    );\n}","import React from 'react';\nimport './style.css';\n\nexport function TodolistItem(props) {\n\n    const item = props.done \n    ? (\n        <li className='todolist-item-done'>\n        <div className='todolist-item-detail-done'>                            \n            <h2 className='todolist-item-time-done'>{props.time}에</h2>\n            <h2 className='todolist-item-plan-done'>[{props.plan}]</h2>\n        </div>\n        <button className='todolist-item-done-button-done' onClick={()=>props.toggleDone()}>완료</button>\n        </li>\n    )\n    : (\n        <li className='todolist-item'>\n            <div className='todolist-item-detail'>                      \n                <h2 className='todolist-item-time'>{props.time}에</h2>\n                <h2 className='todolist-item-plan'>[{props.plan}]</h2>\n            </div>\n            <button className='todolist-item-done-button' onClick={()=>props.toggleDone()}>완료</button>\n        </li>\n    );\n\n    return item;\n}\n\nexport default function Todolist(props) {\n    \n    const element = React.useRef();\n    const [items, setItems] = React.useState([\n        {\n            time: '오후 6시',\n            plan: '약 먹기',\n            done: false\n        },\n        {\n            time: '오후 7시',\n            plan: '물 먹기',\n            done: false\n        },\n        {\n            time: '오후 2시',\n            plan: '밥 먹기',\n            done: true\n        }\n    ]);\n    \n    const parentNoDrag = (e) => {\n        e.stopPropagation();\n    }\n\n    const parentCanDrag = (e) => {\n        e.stopPropagation();\n    }\n\n    return (\n        <section className='todolist-section' ref={element}>\n            <div className='todolist-section-header'>\n                <h1 className='todolist-section-title'>오늘의 할 일</h1>\n                <h1 className='todolist-section-detail'>자세히 보기</h1>\n            </div>\n            <div className='todolist-section-container'\n            onWheel={(e)=>{\n                e.stopPropagation();\n            }}\n            onTouchStart={parentNoDrag}\n            onTouchEnd={parentCanDrag}\n            onMouseEnter={parentNoDrag}\n            onMouseLeave={parentCanDrag}>\n                <ul className='todolist'>\n                    {items.map((item, idx) => {\n                        const toggleDone = () => {\n                            setItems((items) => [\n                            ...items.slice(0, idx),\n                            Object.assign({}, items[idx], {...item, done: !item.done}),\n                            ...items.slice(idx+1)\n                        ])}\n                        return <TodolistItem {...item} toggleDone={toggleDone}/>\n                    })}\n                </ul>\n            </div>\n        </section>\n    );\n}","import React from 'react';\nimport './style.css';\n\nexport default function Training(props) {\n    return (\n        <section className='training-section'>\n            <div className='training-section-header'>\n                <h1 className='training-section-title'>기억력 훈련</h1>\n            </div>\n            <div className='training-section-container'>\n                <ul className='training-items'>\n                    <li className='training-item'>\n                        <icon className='material-icons training-icon'>people</icon>\n                        <div className='training-item-title'>\n                            <h1 className='training-item-name'>맞춤 퀴즈</h1>\n                            <h2 className='training-item-detail'>나와 주변 사람들에 대한 문제를 맞춰요!</h2>\n                        </div>\n                    </li>\n                    <li className='training-item-inverted'>\n                        <icon className='material-icons training-icon-inverted'>extension</icon>\n                        <div className='training-item-title'>\n                            <h1 className='training-item-name-inverted'>십자말풀이</h1>\n                            <h2 className='training-item-detail-inverted'>십자말풀이로 기억력을 높여요!</h2>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </section>\n    );\n}","import React from 'react';\nimport './style.css';\nimport Menu from './components/Menu';\nimport Todolist from './components/Todolist';\nimport Training from './components/Training';\n\nexport default function App(props) {\n\n    const main = React.useRef();\n\n    const [page, setPage] = React.useState(0);\n\n    let touchY;\n\n    const pages = document.getElementsByClassName('pageIdx');\n\n    const noDrag = () => {\n        main.current.classList.add('no-scroll');\n    }\n\n    const canDrag = () => {\n        main.current.classList.remove('no-scroll');\n    }\n\n    const moveToPage = (from, to, speed) => {\n        if(!speed) speed = 0;\n            const toY = pages[to].getBoundingClientRect().top - pages[0].getBoundingClientRect().top\n            setPage(to);\n            main.current.scrollTo({\n                left: 0,\n                top: toY,\n                behavior: 'smooth'\n            });\n    }\n\n    const onWheel = (e) => {\n        if (e.deltaY < 0) {\n            if(page > 0) {\n                moveToPage(page, page-1);\n            }\n        } else {\n            if(page+1 < pages.length) {\n                moveToPage(page, page+1);\n            }\n        }\n    }\n\n    const onTouchStart = (e) => {\n        canDrag();\n        touchY = e.changedTouches[0].screenY;\n    }\n\n    const onTouchMove = (e) => {\n        const dy = e.changedTouches[0].screenY-touchY;\n\n        const height = window.innerHeight;\n        \n        const ady = Math.abs(dy);\n        if (ady >= 0.15 * height) {\n            touchY = undefined;\n            if(dy > 0) {\n                if(page > 0) {\n                    moveToPage(page, page-1);\n                }\n            }\n            else {\n                if(page+1 < pages.length) {\n                    moveToPage(page, page+1);\n                }\n            }\n            noDrag();\n        }\n    }\n\n    const onTouchEnd = (e) => {\n        noDrag();\n        if(touchY) {\n            moveToPage(page, page);\n            return;\n        }\n    }\n\n    return (\n    <div className='frame no-drag'>\n        <nav className='nav'>\n            <Menu />\n        </nav>\n        <main className='main no-scroll' ref={main} onWheel={onWheel}\n        onTouchStart={onTouchStart} onTouchMove={onTouchMove} onTouchEnd={onTouchEnd}>\n            <div className='pageIdx'></div>\n            <div className='greeting'>\n                <h1 className='hello'>\n                    <span className='name'>송인걸</span>님 환영합니다!\n                </h1>\n            </div>\n            <div className='margin'></div>\n            <Todolist />\n            <div className='margin'></div>\n            <Training />\n            <div className='pageIdx'></div>\n            <Training />\n            <div className='margin'></div>\n            <Training />\n            <div className='pageIdx'></div>\n            <Training />\n            <div className='margin'></div>\n            <Training />\n        </main>\n    </div>\n    );\n}","import React from 'react';\nimport AppCss from './css/App'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppCss />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}